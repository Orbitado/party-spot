---
description: 
globs: 
alwaysApply: true
---
# CSS Styling Guidelines

## CSS Modules with PostCSS

This project uses CSS Modules with PostCSS for component styling, enabling scoped styles and modern CSS features.

## File Structure

- Place CSS module files alongside their corresponding components
- Name CSS files with `.module.css` extension
- Follow kebab-case naming nomenclature for CSS files (e.g., `button.tsx` and `button.module.css`)

## Syntax & Features

- Use kebab-case for class names: `.button-primary` not `.buttonPrimary`
- Ensure that the component is fully responsive.
- Ever use the vars of [index.css](mdc:src/index.css)
- Leverage CSS nesting for component structure
- Use CSS variables for theming and consistency
- Apply PostCSS modern features:
  - Nesting: `.parent { .child {} }`
  - Custom properties: `--primary-color: #f00`
  - Custom media queries: `@custom-media --mobile (width <= 600px)`

## Example Usage

```css
/* button.module.css */
.button {
  padding: 0.5rem 1rem;
  border-radius: 4px;
  border: none;

  &.primary {
    background-color: var(--color-primary);
    color: white;
  }

  &.secondary {
    background-color: transparent;
    border: 1px solid var(--color-primary);
  }

  &:hover {
    opacity: 0.9;
  }

  @media (--mobile) {
    width: 100%;
  }
}
```

```jsx
// button.jsx
import styles from "./button.module.css";

function Button({ variant = "primary", children }) {
  return (
    <button className={`${styles.button} ${styles[variant]}`}>
      {children}
    </button>
  );
}
```
